AWSTemplateFormatVersion: 2010-09-09
Description: >
  Analyze videos from different sites and tag these videos.
Parameters:
  ResourceNamePrefix:
    Default: 'poc'
    Type: String
    Description: >
      Resource name in this template should be prefixed with this word
  ECRLambdaConsumerRepo:
    Default: 'poc'
    Type: String
    Description: >
      Resource name in this template should be prefixed with this word
  VpcId:
    Description: >
      S3 bucket holding the video files downloaded from video websites.
    Type: String
    MinLength: 8
    MaxLength: 64
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: rg-data-stream-deployment-us-west-2
  MySubnets:
    Type: CommaDelimitedList
  S3BucketDeployment:
    Description: >
      S3 bucket holding the video files downloaded from video websites.
    Type: String
    MinLength: 8
    MaxLength: 64
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: rg-data-stream-deployment-us-west-2
  IBComponentUri:
    Description: >
      S3 bucket holding the video files downloaded from video websites.
    Type: String
    MinLength: 16
    MaxLength: 128
    Default: s3://deployment-bucket/component.yaml
  IBComponentVersion:
    Description: >
      S3 bucket holding the video files downloaded from video websites.
    Type: String
    MinLength: 5
    MaxLength: 8
    AllowedPattern: '^[0-9]+\.[0-9]+\.[0-9]+$'
    Default: 1.2.0
  IBImageRecipeParentAmiId:
    Description: >
      S3 bucket holding the video files downloaded from video websites.
    Type: String
    Default: ami-12345
Resources:
  PicvoxGameVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '172.19.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PicvoxGameRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PicvoxGameVpc
  PicvoxGameInternetGateway:
    Type: AWS::EC2::InternetGateway
  PicvoxGameAttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref PicvoxGameVpc
      InternetGatewayId: !Ref PicvoxGameInternetGateway
  PicvoxGameInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PicvoxGameVpc
  PicvoxGameInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PicvoxGameInternetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref PicvoxGameInternetGateway
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'rg-internet-sg'
      GroupDescription: "Allow http to client host"
      VpcId: !Ref PicvoxGameVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8888
          ToPort: 8888
          CidrIp: 0.0.0.0/0
  PicvoxGameVpcSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt PicvoxGameVpc.CidrBlock, 4, 14 ]]
      VpcId: !Ref PicvoxGameVpc
  PicvoxGameVpcSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PicvoxGameVpcSubnetA
      RouteTableId: !Ref PicvoxGameInternetRouteTable
  PicvoxGameVpcSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt PicvoxGameVpc.CidrBlock, 4, 14 ]]
      VpcId: !Ref PicvoxGameVpc
  PicvoxGameVpcSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PicvoxGameVpcSubnetB
      RouteTableId: !Ref PicvoxGameInternetRouteTable
  PicvoxGameVpcSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt PicvoxGameVpc.CidrBlock, 4, 14 ]]
      VpcId: !Ref PicvoxGameVpc
  PicvoxGameVpcSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PicvoxGameVpcSubnetC
      RouteTableId: !Ref PicvoxGameRouteTable
  PicvoxGameVpcSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt PicvoxGameVpc.CidrBlock, 4, 14 ]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref PicvoxGameVpc
  PicvoxGameVpcSubnetDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PicvoxGameVpcSubnetD
      RouteTableId: !Ref PicvoxGameRouteTable
  FluentBitEC2InstanceProfileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [!Ref ResourceNamePrefix, 'FluentBitEC2InstanceProfileRole']]
      Description: >
        'Role for executing analyze video lambda function.'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
  FluentBitEC2InstanceProfile: 
      Type: "AWS::IAM::InstanceProfile"
      Properties: 
        Path: "/"
        Roles: 
          - !Ref FluentBitEC2InstanceProfileRole

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        IamInstanceProfile: 
          Name: !Ref FluentBitEC2InstanceProfile
        ImageId: !Ref IBImageRecipeParentAmiId
        InstanceType: t2.micro
        SecurityGroupIds: 
          - !GetAtt InstanceSecurityGroup.GroupId
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              DeleteOnTermination: true
              Encrypted: false
              VolumeType: "gp2"
              VolumeSize: 100
  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
    Properties:
      AutoScalingGroupName: "rg-test-asg"
      MinSize: '0'
      MaxSize: '0'
      DesiredCapacity: '0'
      Cooldown: 240
      HealthCheckGracePeriod: 180
      HealthCheckType: 'ELB'
      TerminationPolicies:
        - 'OldestLaunchTemplate'
#      VPCZoneIdentifier: !Ref MySubnets
      VPCZoneIdentifier:
        - !Ref PicvoxGameVpcSubnetC
        - !Ref PicvoxGameVpcSubnetD
      TargetGroupARNs: 
        - !Ref MyTargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
  myCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref myASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref PicvoxGameVpc
      HealthCheckEnabled: true
      HealthCheckPath: '/api/v1/health'
      HealthCheckPort: 2020
      HealthCheckProtocol: 'HTTP'
      Name: 'rg-MyTargets'
      TargetType: 'instance'
      Protocol: 'TCP'
      Port: 8888
  MyNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: 'rg-test-nlb'
      IpAddressType: 'ipv4'
      Scheme: 'internet-facing'
#      Subnets: !Ref MySubnets
      Subnets:
        - !Ref PicvoxGameVpcSubnetA
        - !Ref PicvoxGameVpcSubnetB
      Type: 'network'
  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyNLB
      Port: 80
      Protocol: "TCP"
  MyRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref ECRLambdaConsumerRepo
      RepositoryPolicyText: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: AllowPushPull
            Effect: Allow
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
  AnalyzeVideoRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'rg-lambda-kinesis-role'
      Description: >
        'Role for executing kinesis lambda function.'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaKinesisExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
  ReadRecordFromKinesis:
    Type: 'AWS::Lambda::Function'
    DependsOn: AnalyzeVideoRole
    Properties:
      FunctionName: !Join ['-', [!Ref ResourceNamePrefix, 'AnalyzeVideo']]
      Description: 'Download video from website and tag it.'
      PackageType: 'Image'
      MemorySize: 512
      Code: 
      Handler: analyze-video/index.handler
      Role: !GetAtt AnalyzeVideoRole.Arn
      Timeout: 30
      Runtime: nodejs12.x
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          VIDEO_TASK_QUEUE_URL: !Ref VideoTaskQueue
        