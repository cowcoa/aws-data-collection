AWSTemplateFormatVersion: 2010-09-09
Description: >
  Analyze videos from different sites and tag these videos.
Parameters:
  ResourceNamePrefix:
    Default: 'poc'
    Type: String
    Description: >
      Resource name in this template should be prefixed with this word
  VpcId:
    Description: >
      S3 bucket holding the video files downloaded from video websites.
    Type: String
    MinLength: 8
    MaxLength: 64
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: rg-data-stream-deployment-us-west-2
  S3BucketDeployment:
    Description: >
      S3 bucket holding the video files downloaded from video websites.
    Type: String
    MinLength: 8
    MaxLength: 64
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: rg-data-stream-deployment-us-west-2
  IBComponentUri:
    Description: >
      S3 bucket holding the video files downloaded from video websites.
    Type: String
    MinLength: 16
    MaxLength: 128
    Default: s3://deployment-bucket/component.yaml
  IBComponentVersion:
    Description: >
      S3 bucket holding the video files downloaded from video websites.
    Type: String
    MinLength: 5
    MaxLength: 8
    AllowedPattern: '^[0-9]+\.[0-9]+\.[0-9]+$'
    Default: 1.2.0
  IBImageRecipeParentAmiId:
    Description: >
      S3 bucket holding the video files downloaded from video websites.
    Type: String
    Default: ami-12345
Resources:
  IBEC2InstanceProfileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [!Ref ResourceNamePrefix, 'EC2InstanceProfileForImageBuilder']]
      Description: >
        'Role for executing analyze video lambda function.'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder'
        - 'arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
  IBEC2InstanceProfile: 
      Type: "AWS::IAM::InstanceProfile"
      Properties: 
        Path: "/"
        Roles: 
          - !Ref IBEC2InstanceProfileRole
  IBFluentBitComponent:
    Type: AWS::ImageBuilder::Component
    Properties: 
      Name: !Join ['-', [!Ref ResourceNamePrefix, 'fluentbit']]
      ChangeDescription: 'Initial version.'
      Description: 'Install fluent-bit.'
      Platform: 'Linux'
      Uri: !Ref IBComponentUri
      Version: !Ref IBComponentVersion
  IBFluentBitImageRecipe:
    Type: 'AWS::ImageBuilder::ImageRecipe'
    Properties:
      Name: 'image-recipe-name'
      Version: '1.2.0'
      ParentImage: !Ref IBImageRecipeParentAmiId
      Description: 'description'
      Components:
        - ComponentArn: !Ref IBFluentBitComponent
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: true
            Encrypted: false
            VolumeType: "gp2"
            VolumeSize: 100
  IBFluentBitInfraConfig:
      Type: 'AWS::ImageBuilder::InfrastructureConfiguration'
      Properties:
        Name: 'infrastructure-configuration-name'
        InstanceProfileName: !Ref IBEC2InstanceProfile
        Description: 'description'
        InstanceTypes:
          - 'm5.large'
        Logging:
          S3Logs:
            S3BucketName: !Ref S3BucketDeployment
            S3KeyPrefix: 'image-builder/logs'
        TerminateInstanceOnFailure: true
  IBFluentBitDistConfig:
    Type: 'AWS::ImageBuilder::DistributionConfiguration'
    Properties:
      Name: 'fluentbit-distribution-config-2'
      Description: 'description'
      Distributions:
        - Region: 'us-west-2'
          AmiDistributionConfiguration:
            Name: 'fluentbit - {{ imagebuilder:buildDate }}'
            Description: 'description'
  IBFluentBitImagePipeline:
      Type: 'AWS::ImageBuilder::ImagePipeline'
      Properties:
        Name: 'image-pipeline-name'
        Description: 'description'
        ImageRecipeArn: !Ref IBFluentBitImageRecipe
        InfrastructureConfigurationArn: !Ref IBFluentBitInfraConfig
        DistributionConfigurationArn: !Ref IBFluentBitDistConfig
        EnhancedImageMetadataEnabled: True
  IBFluentBitImage:
      Type: 'AWS::ImageBuilder::Image'
      Properties:
        ImageRecipeArn: !Ref IBFluentBitImageRecipe
        InfrastructureConfigurationArn: !Ref IBFluentBitInfraConfig
        DistributionConfigurationArn: !Ref IBFluentBitDistConfig
        EnhancedImageMetadataEnabled: True
#-----------------------------------------------
  FluentBitEC2InstanceProfileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [!Ref ResourceNamePrefix, 'FluentBitEC2InstanceProfileRole']]
      Description: >
        'Role for executing analyze video lambda function.'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
  FluentBitEC2InstanceProfile: 
      Type: "AWS::IAM::InstanceProfile"
      Properties: 
        Path: "/"
        Roles: 
          - !Ref FluentBitEC2InstanceProfileRole
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        VpcId: !Ref VpcId
        GroupDescription: Allow http to client host
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 8888
            ToPort: 8888
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: -1
            ToPort: -1
            CidrIp: 0.0.0.0/0
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        IamInstanceProfile: 
          Name: !Ref FluentBitEC2InstanceProfile
        ImageId: !GetAtt IBFluentBitImage.ImageId
        InstanceType: t2.micro
        SecurityGroupIds: 
          - !GetAtt InstanceSecurityGroup.GroupId
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              DeleteOnTermination: true
              Encrypted: false
              VolumeType: "gp2"
              VolumeSize: 100
  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
    Properties:
      AutoScalingGroupName: "rg-test-asg"
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      Cooldown: 240
      HealthCheckGracePeriod: 180
      HealthCheckType: 'ELB'
      TerminationPolicies:
        - 'OldestLaunchTemplate'
      VPCZoneIdentifier: !Ref MySubnets
      TargetGroupARNs: 
        - !Ref MyTargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      HealthCheckEnabled: true
      HealthCheckPath: '/api/v1/health'
      HealthCheckPort: 2020
      HealthCheckProtocol: 'HTTP'
      Name: 'rg-MyTargets'
      TargetType: 'instance'
      Protocol: 'TCP'
      Port: 8888
  MyNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: 'rg-test-nlb'
      IpAddressType: 'ipv4'
      Scheme: 'internet-facing'
      Subnets: !Ref MySubnets
      Type: 'network'
  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyNLB
      Port: 80
      Protocol: "TCP"