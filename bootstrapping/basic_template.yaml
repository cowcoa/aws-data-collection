AWSTemplateFormatVersion: 2010-09-09
Description: >
  Basic template for AWS Data Collection. 
  Subnet A/B for public access, Subnet C/D for private.
  Subnet A and C in the same AZ. Subnet B and D in the same AZ.
Parameters:
  Prefix:
    Default: 'poc'
    Type: String
    Description: >
      Resource name in this template should be prefixed with this word.
  VpcBlock:
    Default: '172.19.0.0/16'
    Type: String
    Description: >
      VPC's CIDR range.
  DataRecordsBucketName:
    Default: 's3-bucket'
    Type: String
    Description: >
      Data records bucket.
  ShouldCreateBucket:
    Default: 'true'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Description: >
      Flag that indicate whether the data records bucket should be created.
  LambdaConsumerRepoName:
    Default: 'ecr-repository'
    Type: String
    Description: >
      Lambda consumer image repository.
  ShouldCreateRepository:
    Default: 'true'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Description: >
      Flag that indicate whether the ecr lambda consumer repository should be created.
Conditions:
  CreateBucket: !Equals [!Ref ShouldCreateBucket, 'true']
  CreateRepository: !Equals [!Ref ShouldCreateRepository, 'true']
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref Prefix, 'fluentbit-vpc']]
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref Prefix, 'fluentbit-rt-pri']]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref Prefix, 'fluentbit-igw']]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref Prefix, 'fluentbit-rt-pub']]
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  VpcSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 14 ]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref Prefix, 'fluentbit-sub-pub-a']]
  VpcSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnetA
      RouteTableId: !Ref PublicRouteTable
  VpcSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 14 ]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref Prefix, 'fluentbit-sub-pub-b']]
  VpcSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnetB
      RouteTableId: !Ref PublicRouteTable
  VpcSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 14 ]]
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref Prefix, 'fluentbit-sub-pri-c']]
  VpcSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnetC
      RouteTableId: !Ref PrivateRouteTable
  VpcSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 14 ]]
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref Prefix, 'fluentbit-sub-pri-d']]
  VpcSubnetDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnetD
      RouteTableId: !Ref PrivateRouteTable
  DataRecordsBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Condition: CreateBucket
    Properties:
      BucketName: !Ref DataRecordsBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  LambdaConsumerRepo: 
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    Condition: CreateRepository
    Properties: 
      RepositoryName: !Ref LambdaConsumerRepoName
      RepositoryPolicyText: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: AllowPushPull
            Effect: Allow
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
  VpcEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [!Ref Prefix, 'vpc-endpoint-sg']]
      GroupDescription: 'Enable HTTPS access on 443 port for AWS Service.'
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref Prefix, 'vpc-endpoint-sg']]
  KinesisStreamEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    DependsOn: VpcEndpointSG
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt VpcEndpointSG.GroupId
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.kinesis-streams'
      VpcId: !Ref Vpc
      SubnetIds:
        - !Ref VpcSubnetC
        - !Ref VpcSubnetD
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref Prefix, 'fluentbit-kinesis-stream']]
Outputs:
  VpcValue:
    Description: The VPC ID.
    Value: !Ref Vpc
    Export:
      Name: !Sub '${AWS::StackName}-Vpc'
  VpcSubnetAValue:
    Description: The first subnet ID that is associated with the VPC.
    Value: !Ref VpcSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-SubnetA'
  VpcSubnetBValue:
    Description: The second subnet ID that is associated with the VPC.
    Value: !Ref VpcSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetB'
  VpcSubnetCValue:
    Description: The third subnet ID that is associated with the VPC.
    Value: !Ref VpcSubnetC
    Export:
      Name: !Sub '${AWS::StackName}-SubnetC'
  VpcSubnetDValue:
    Description: The fourth subnet ID that is associated with the VPC.
    Value: !Ref VpcSubnetD
    Export:
      Name: !Sub '${AWS::StackName}-SubnetD'
